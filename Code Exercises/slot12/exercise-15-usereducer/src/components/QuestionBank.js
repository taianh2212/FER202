// ‚úÖ B√†i 5 & 6 ‚Äì Quiz tr·∫Øc nghi·ªám s·ª≠ d·ª•ng useReducer
// T√≠nh nƒÉng: l√†m b√†i tr·∫Øc nghi·ªám, t√≠nh ƒëi·ªÉm, ph·∫£n h·ªìi ƒë√∫ng/sai, ƒë·∫øm gi·ªù, ti·∫øn tr√¨nh, l∆∞u ƒëi·ªÉm cao

import React, { useReducer, useEffect, useState } from "react";
import { Button, Container, Card, ProgressBar } from "react-bootstrap";
import { FaCheckCircle, FaTimesCircle } from "react-icons/fa";

// Tr·∫°ng th√°i kh·ªüi t·∫°o
const initialState = {
  questions: [
    {
      id: 1,
      question: "What is the capital of Australia?",
      options: ["Sydney", "Canberra", "Melbourne", "Perth"],
      answer: "Canberra",
    },
    {
      id: 2,
      question: "Which planet is known as the Red Planet?",
      options: ["Venus", "Mars", "Jupiter", "Saturn"],
      answer: "Mars",
    },
    {
      id: 3,
      question: "What is the largest ocean on Earth?",
      options: [
        "Atlantic Ocean",
        "Indian Ocean",
        "Pacific Ocean",
        "Arctic Ocean",
      ],
      answer: "Pacific Ocean",
    },
  ],
  currentQuestion: 0,
  selectedOption: "",
  score: 0,
  showScore: false,
  feedback: null, // ‚úÖ Ph·∫£n h·ªìi ƒë√∫ng/sai
  highScore: 0,    // ‚úÖ ƒêi·ªÉm cao l∆∞u localStorage
};

// Reducer x·ª≠ l√Ω c√°c h√†nh ƒë·ªông c·ªßa quiz
function quizReducer(state, action) {
  switch (action.type) {
    case "SELECT_OPTION":
      return { ...state, selectedOption: action.payload, feedback: null };

    case "NEXT_QUESTION": {
      const currentQ = state.questions[state.currentQuestion];
      const isCorrect = state.selectedOption === currentQ.answer;

      const updatedScore = isCorrect ? state.score + 1 : state.score;

      const isLast = state.currentQuestion + 1 === state.questions.length;

      // C·∫≠p nh·∫≠t ƒëi·ªÉm cao n·∫øu cao h∆°n
      const updatedHighScore =
        updatedScore > state.highScore ? updatedScore : state.highScore;
      if (updatedScore > state.highScore) {
        localStorage.setItem("highScore", updatedScore.toString());
      }

      return {
        ...state,
        score: updatedScore,
        currentQuestion: state.currentQuestion + 1,
        selectedOption: "",
        showScore: isLast,
        feedback: null,
        highScore: updatedHighScore,
      };
    }

    case "RESTART_QUIZ":
      return {
        ...initialState,
        highScore: state.highScore, // gi·ªØ ƒëi·ªÉm cao
      };

    case "SET_FEEDBACK":
      return { ...state, feedback: action.payload };

    case "SET_HIGHSCORE":
      return { ...state, highScore: action.payload };

    default:
      return state;
  }
}

function QuestionBank() {
  const [state, dispatch] = useReducer(quizReducer, initialState);
  const {
    questions,
    currentQuestion,
    selectedOption,
    score,
    showScore,
    feedback,
    highScore,
  } = state;

  const [timer, setTimer] = useState(10); // ‚è≥ ƒê·∫øm ng∆∞·ª£c m·ªói c√¢u 10s

  // Load ƒëi·ªÉm cao t·ª´ localStorage l√∫c kh·ªüi ƒë·ªông
  useEffect(() => {
    const savedHighScore = parseInt(localStorage.getItem("highScore")) || 0;
    dispatch({ type: "SET_HIGHSCORE", payload: savedHighScore });
  }, []);

  // ‚è± ƒê·∫øm ng∆∞·ª£c th·ªùi gian m·ªói c√¢u
  useEffect(() => {
    if (showScore) return;

    if (timer === 0) {
      // N·∫øu h·∫øt gi·ªù m√† ch∆∞a ch·ªçn ƒë√°p √°n => sai
      dispatch({
        type: "SET_FEEDBACK",
        payload: { correct: false, correctAnswer: questions[currentQuestion].answer },
      });

      setTimeout(() => {
        dispatch({ type: "NEXT_QUESTION" });
        setTimer(10);
      }, 1500);

      return;
    }

    const interval = setInterval(() => {
      setTimer((prev) => prev - 1);
    }, 1000);

    return () => clearInterval(interval);
  }, [timer, showScore, currentQuestion, questions]);

  // Khi ch·ªçn ƒë√°p √°n
  const handleOptionSelect = (option) => {
    dispatch({ type: "SELECT_OPTION", payload: option });

    const correct = option === questions[currentQuestion].answer;

    dispatch({
      type: "SET_FEEDBACK",
      payload: { correct, correctAnswer: questions[currentQuestion].answer },
    });

    setTimeout(() => {
      dispatch({ type: "NEXT_QUESTION" });
      setTimer(10);
    }, 1500);
  };

  // B·∫Øt ƒë·∫ßu l·∫°i
  const handleRestartQuiz = () => {
    dispatch({ type: "RESTART_QUIZ" });
    setTimer(10);
  };

  const progress =
    ((currentQuestion + (showScore ? 1 : 0)) / questions.length) * 100;

  return (
    <Container className="mt-4">
      <Card className="p-4 shadow">
        {showScore ? (
          <div className="text-center">
            <h2>
              üéâ K·∫øt qu·∫£: {score} / {questions.length}
            </h2>
            <h4>üèÜ ƒêi·ªÉm cao nh·∫•t: {highScore}</h4>
            <Button onClick={handleRestartQuiz} className="mt-3">
              Ch∆°i l·∫°i
            </Button>
          </div>
        ) : (
          <div>
            {/* Ti·∫øn tr√¨nh */}
            <div className="mb-2">
              <strong>
                C√¢u {currentQuestion + 1}/{questions.length}
              </strong>
              <ProgressBar now={progress} className="mt-1" />
            </div>

            {/* C√¢u h·ªèi */}
            <h5>{questions[currentQuestion].question}</h5>

            {/* C√°c l·ª±a ch·ªçn */}
            <div className="mt-3">
              {questions[currentQuestion].options.map((option, index) => (
                <Button
                  key={index}
                  variant={
                    selectedOption === option ? "success" : "outline-secondary"
                  }
                  className="m-2"
                  disabled={!!selectedOption}
                  onClick={() => handleOptionSelect(option)}
                >
                  {option}
                </Button>
              ))}
            </div>

            {/* Ph·∫£n h·ªìi ƒë√∫ng/sai */}
            {feedback && (
              <div className="mt-3">
                {feedback.correct ? (
                  <p className="text-success">
                    <FaCheckCircle /> ƒê√∫ng r·ªìi! üéâ
                  </p>
                ) : (
                  <p className="text-danger">
                    <FaTimesCircle /> Sai r·ªìi! ƒê√°p √°n ƒë√∫ng l√†:{" "}
                    <strong>{feedback.correctAnswer}</strong>
                  </p>
                )}
              </div>
            )}

            {/* ƒê·ªìng h·ªì ƒë·∫øm ng∆∞·ª£c */}
            <div className="mt-3">
              <p className={timer <= 5 ? "text-danger fw-bold" : ""}>
                ‚è≥ Th·ªùi gian c√≤n l·∫°i: {timer}s
              </p>
            </div>
          </div>
        )}
      </Card>
    </Container>
  );
}

export default QuestionBank;
